# This is a basic workflow to help you get started with Actions

name: CI

on: 
  pull_request:
    branches:
      - "*"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  unit-testing:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # config java sdk version
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'
        
    # Run unit testing
    - name: Run unit testing
      run: |
        cd github-search/
        ./gradlew test
  
  static-analyse:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # config java sdk version
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'
        
    # Run ktlint check
    - name: Run kLint check
      run: |
        cd github-search/
        ./gradlew ktlintCheck

  instrumentation-testing:
    # The type of runner that the job will run on
    runs-on:  macOS-latest
    strategy:
      matrix:
        api-level: [24]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # config java sdk version
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    # adding AVD caching according to the official documentation https://github.com/marketplace/actions/android-emulator-runner
    - name: Gradle cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}
  
    - name: AVD cache
      uses: actions/cache@v2
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{ matrix.api-level }}

    - name: create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."

    # run instrumentation testing
    - name: run instrumentation testing
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: cd github-search && ./gradlew connectedCheck
